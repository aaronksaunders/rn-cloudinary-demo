//
//  react_native_cloudinary.m
//  react-native-cloudinary
//
//  Created by Aaron saunders on 5/14/15.
//  Copyright (c) 2015 Clearly Innovative Inc. All rights reserved.
//

#import "RNCloudinary.h"
#import "Cloudinary.h"
#import "RCTLog.h"
#import "RCTConvert.h"

@implementation RNCloudinary

// Expose this module to the React Native bridge
RCT_EXPORT_MODULE()


RCTResponseSenderBlock _callback;


@synthesize bridge = _bridge;


- (dispatch_queue_t)methodQueue
{
    return dispatch_get_main_queue();
}


- (void) uploaderSuccess:(NSDictionary*)result context:(id)context {
    NSString* publicId = [result valueForKey:@"public_id"];
   // NSLog(@"Upload success. Public ID=%@, Full result=%@", publicId, result);
    
    NSDictionary *successDict = @{
                                  @"success" : @YES,
                                  @"result"  :result,
                                  @"publicId" : publicId,
                                  };
    _callback(@[successDict]);
}

- (void) uploaderError:(NSString*)result code:(NSInteger) code context:(id)context {
   // NSLog(@"Upload error: %@, %ld", result, (long)code);
    NSDictionary *errorDict = @{
                                  @"success" : @NO,
                                  @"result"  : result,
                                  @"code"  : [NSString stringWithFormat:@"%ld", (long)code],
                                  };
    _callback(@[errorDict]);

}

- (void) uploaderProgress:(NSInteger)bytesWritten totalBytesWritten:(NSInteger)totalBytesWritten totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite context:(id)context {
    //NSLog(@"Upload progress: %ld/%ld (+%ld)", (long)totalBytesWritten, (long)totalBytesExpectedToWrite, (long)bytesWritten);
    

    
    NSDictionary *progressDict = @{
                                @"totalWritten"  : [NSString stringWithFormat:@"%ld", (long)totalBytesWritten],
                                @"totalExpected" : [NSString stringWithFormat:@"%ld", (long)totalBytesExpectedToWrite],
                                @"bytesWritten"  : [NSString stringWithFormat:@"%ld", (long)bytesWritten],
                                };
    
    [self.bridge.eventDispatcher sendDeviceEventWithName:@"RNCloudinary.Progress"
                                                 body:progressDict];
}


RCT_EXPORT_METHOD(uploadImage:(NSString *)filePath callback:(RCTResponseSenderBlock)callback )
{
    
    _callback = callback;
    
    CLCloudinary *cloudinary = [[CLCloudinary alloc] init];
    [cloudinary.config setValue:@"clearly-innovative-inc" forKey:@"cloud_name"];
    [cloudinary.config setValue:@"" forKey:@"api_key"];
    [cloudinary.config setValue:@"2X-" forKey:@"api_secret"];
    
    CLUploader* uploader = [[CLUploader alloc] init:cloudinary delegate:self];
    
    NSString *bundlePath = [[NSBundle mainBundle] pathForResource:@"testdata" ofType:@"bundle"];
    NSBundle *bundle = [NSBundle bundleWithPath:bundlePath];
    
    NSString *imageFilePath = [bundle pathForResource:@"react1" ofType:@"mov"];
    
    NSLog(@"***imageFilePath: %@", imageFilePath);
    
    [uploader upload:imageFilePath options:@{@"resource_type": @"auto"}];
}

#pragma mark Private

static NSString *RCTKeyForInstance(id instance)
{
    return [NSString stringWithFormat:@"%p", instance];
}

#pragma mark Constants

- (NSDictionary *)constantsToExport
{
    return @{ @"ProgressEvent": @"RNCloudinary.Progress" };
}

@end